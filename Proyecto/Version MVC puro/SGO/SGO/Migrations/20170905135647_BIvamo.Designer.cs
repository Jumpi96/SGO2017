// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SGO.Models;
using System;

namespace SGO.Migrations
{
    [DbContext(typeof(SGOContext))]
    [Migration("20170905135647_BIvamo")]
    partial class BIvamo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SGO.Models.DetalleSubItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Cantidad");

                    b.Property<int?>("ObraID");

                    b.Property<double>("PrecioUnitario");

                    b.Property<int?>("SubItemID");

                    b.HasKey("ID");

                    b.HasIndex("ObraID");

                    b.HasIndex("SubItemID");

                    b.ToTable("DetalleSubItem");
                });

            modelBuilder.Entity("SGO.Models.Item", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.Property<int?>("SubRubroID");

                    b.Property<int?>("UnidadID");

                    b.HasKey("ID");

                    b.HasIndex("SubRubroID");

                    b.HasIndex("UnidadID");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("SGO.Models.Movimiento", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Cantidad");

                    b.Property<int?>("DetalleSubItemID");

                    b.Property<DateTime>("Fecha");

                    b.Property<DateTime>("ModFecha");

                    b.Property<int?>("ModUsuarioID");

                    b.Property<string>("Observaciones");

                    b.Property<int?>("ReceptorID");

                    b.HasKey("ID");

                    b.HasIndex("DetalleSubItemID");

                    b.HasIndex("ModUsuarioID");

                    b.HasIndex("ReceptorID");

                    b.ToTable("Movimiento");
                });

            modelBuilder.Entity("SGO.Models.Obra", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cliente");

                    b.Property<double>("Coeficiente");

                    b.Property<bool>("Finalizada");

                    b.Property<DateTime>("InsFecha");

                    b.Property<DateTime>("ModFecha");

                    b.Property<int?>("ModUsuarioID");

                    b.Property<string>("Nombre");

                    b.HasKey("ID");

                    b.HasIndex("ModUsuarioID");

                    b.ToTable("Obra");
                });

            modelBuilder.Entity("SGO.Models.Receptor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.Property<string>("Observaciones");

                    b.HasKey("ID");

                    b.ToTable("Receptor");
                });

            modelBuilder.Entity("SGO.Models.Rubro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.Property<string>("Numeracion");

                    b.HasKey("ID");

                    b.ToTable("Rubro");
                });

            modelBuilder.Entity("SGO.Models.SubItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ItemID");

                    b.Property<string>("Nombre");

                    b.Property<double>("PrecioUnitario");

                    b.Property<int?>("TipoItemID");

                    b.Property<int?>("UnidadID");

                    b.HasKey("ID");

                    b.HasIndex("ItemID");

                    b.HasIndex("TipoItemID");

                    b.HasIndex("UnidadID");

                    b.ToTable("SubItem");
                });

            modelBuilder.Entity("SGO.Models.SubRubro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.Property<int?>("RubroID");

                    b.HasKey("ID");

                    b.HasIndex("RubroID");

                    b.ToTable("SubRubro");
                });

            modelBuilder.Entity("SGO.Models.TipoItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caracter");

                    b.Property<string>("Nombre");

                    b.HasKey("ID");

                    b.ToTable("TipoItem");
                });

            modelBuilder.Entity("SGO.Models.Unidad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion");

                    b.Property<string>("Nombre");

                    b.HasKey("ID");

                    b.ToTable("Unidad");
                });

            modelBuilder.Entity("SGO.Models.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Admin");

                    b.Property<string>("NombreUsuario");

                    b.Property<string>("Password");

                    b.HasKey("ID");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("SGO.Models.DetalleSubItem", b =>
                {
                    b.HasOne("SGO.Models.Obra", "Obra")
                        .WithMany()
                        .HasForeignKey("ObraID");

                    b.HasOne("SGO.Models.SubItem", "SubItem")
                        .WithMany()
                        .HasForeignKey("SubItemID");
                });

            modelBuilder.Entity("SGO.Models.Item", b =>
                {
                    b.HasOne("SGO.Models.SubRubro", "SubRubro")
                        .WithMany()
                        .HasForeignKey("SubRubroID");

                    b.HasOne("SGO.Models.Unidad", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadID");
                });

            modelBuilder.Entity("SGO.Models.Movimiento", b =>
                {
                    b.HasOne("SGO.Models.DetalleSubItem", "DetalleSubItem")
                        .WithMany()
                        .HasForeignKey("DetalleSubItemID");

                    b.HasOne("SGO.Models.Usuario", "ModUsuario")
                        .WithMany()
                        .HasForeignKey("ModUsuarioID");

                    b.HasOne("SGO.Models.Receptor", "Receptor")
                        .WithMany()
                        .HasForeignKey("ReceptorID");
                });

            modelBuilder.Entity("SGO.Models.Obra", b =>
                {
                    b.HasOne("SGO.Models.Usuario", "ModUsuario")
                        .WithMany()
                        .HasForeignKey("ModUsuarioID");
                });

            modelBuilder.Entity("SGO.Models.SubItem", b =>
                {
                    b.HasOne("SGO.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID");

                    b.HasOne("SGO.Models.TipoItem", "TipoItem")
                        .WithMany()
                        .HasForeignKey("TipoItemID");

                    b.HasOne("SGO.Models.Unidad", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadID");
                });

            modelBuilder.Entity("SGO.Models.SubRubro", b =>
                {
                    b.HasOne("SGO.Models.Rubro", "Rubro")
                        .WithMany()
                        .HasForeignKey("RubroID");
                });
#pragma warning restore 612, 618
        }
    }
}
